!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABUF_INIT	ghi.c	96;"	d	file:
ARROW_DOWN	ghi.c	/^    ARROW_DOWN ,$/;"	e	enum:editorKey	file:
ARROW_LEFT	ghi.c	/^    ARROW_LEFT  = 1000,$/;"	e	enum:editorKey	file:
ARROW_RIGHT	ghi.c	/^    ARROW_RIGHT,$/;"	e	enum:editorKey	file:
ARROW_UP	ghi.c	/^    ARROW_UP   ,$/;"	e	enum:editorKey	file:
BACKSPACE	ghi.c	/^    BACKSPACE = 127,$/;"	e	enum:editorKey	file:
CC	Makefile	/^CC=cc$/;"	m
CTRL_KEY	ghi.c	46;"	d	file:
DBUG	Makefile	/^DBUG= -g$/;"	m
DEL_KEY	ghi.c	/^    DEL_KEY,$/;"	e	enum:editorKey	file:
E	ghi.c	/^struct editorConfig E; \/\/ Make global variable for config$/;"	v	typeref:struct:editorConfig
END_KEY	ghi.c	/^    END_KEY,$/;"	e	enum:editorKey	file:
FLAGS	Makefile	/^FLAGS=-Wall -Wextra -pedantic $/;"	m
GHI_QUIT_TIMES	ghi.c	45;"	d	file:
GHI_TAB_STOP	ghi.c	44;"	d	file:
GHI_VERSION	ghi.c	43;"	d	file:
HOME_KEY	ghi.c	/^    HOME_KEY,$/;"	e	enum:editorKey	file:
PAGE_DOWN	ghi.c	/^    PAGE_DOWN$/;"	e	enum:editorKey	file:
PAGE_UP	ghi.c	/^    PAGE_UP,$/;"	e	enum:editorKey	file:
STD	Makefile	/^STD=-std=c99$/;"	m
_BSD_SOURCE	ghi.c	25;"	d	file:
_DEFUALT_SOURCE	ghi.c	24;"	d	file:
_GNU_SOURCE	ghi.c	26;"	d	file:
abAppend	ghi.c	/^void abAppend(struct abuf *ab, const char *s, int len) {$/;"	f
abFree	ghi.c	/^void abFree(struct abuf *ab) {$/;"	f
abuf	ghi.c	/^struct abuf {$/;"	s	file:
b	ghi.c	/^    char *b;$/;"	m	struct:abuf	file:
chars	ghi.c	/^    char *chars;$/;"	m	struct:erow	file:
coloff	ghi.c	/^    int coloff; \/\/ Col offset$/;"	m	struct:editorConfig	file:
convertToUnicode	ghi.c	/^void convertToUnicode(struct abuf *ab, unsigned codePoint) {$/;"	f
cx	ghi.c	/^    int cx,cy; \/\/ x,y$/;"	m	struct:editorConfig	file:
cy	ghi.c	/^    int cx,cy; \/\/ x,y$/;"	m	struct:editorConfig	file:
die	ghi.c	/^void die(const char *s) {$/;"	f
dirty	ghi.c	/^    int dirty; \/\/ State modified a file$/;"	m	struct:editorConfig	file:
disableRawMode	ghi.c	/^void disableRawMode() {$/;"	f
editorConfig	ghi.c	/^struct editorConfig {$/;"	s	file:
editorDelChar	ghi.c	/^void editorDelChar() {$/;"	f
editorDelRow	ghi.c	/^void editorDelRow(int at) {$/;"	f
editorDrawMessageBar	ghi.c	/^void editorDrawMessageBar(struct abuf *ab) {$/;"	f
editorDrawRows	ghi.c	/^void editorDrawRows(struct abuf *ab) {$/;"	f
editorDrawStatusBar	ghi.c	/^void editorDrawStatusBar(struct abuf *ab) {$/;"	f
editorFind	ghi.c	/^void editorFind() {$/;"	f
editorFindCallback	ghi.c	/^void editorFindCallback(char *query, int key) {$/;"	f
editorFreeRow	ghi.c	/^void editorFreeRow(erow *row) {$/;"	f
editorInsertChar	ghi.c	/^void editorInsertChar(int c) {$/;"	f
editorInsertNewLine	ghi.c	/^void editorInsertNewLine() {$/;"	f
editorInsertRow	ghi.c	/^void editorInsertRow(int at, char *s, size_t len) {$/;"	f
editorKey	ghi.c	/^enum editorKey {$/;"	g	file:
editorMoveCursor	ghi.c	/^void editorMoveCursor(int key) {$/;"	f
editorOpen	ghi.c	/^void editorOpen(char *filename) {$/;"	f
editorProcessKeypress	ghi.c	/^void editorProcessKeypress() {$/;"	f
editorPrompt	ghi.c	/^char *editorPrompt(char *prompt, void (*callback)(char *,int)) {$/;"	f
editorReadKey	ghi.c	/^int editorReadKey() {$/;"	f
editorRefreshScreen	ghi.c	/^void editorRefreshScreen() {$/;"	f
editorRowAppendString	ghi.c	/^void editorRowAppendString(erow *row, char *s, size_t len) {$/;"	f
editorRowCxToRx	ghi.c	/^int editorRowCxToRx(erow *row, int cx) {$/;"	f
editorRowDelChar	ghi.c	/^void editorRowDelChar(erow *row, int at) {$/;"	f
editorRowInsertChar	ghi.c	/^void editorRowInsertChar(erow *row, int at, int c) {$/;"	f
editorRowRxToCx	ghi.c	/^int editorRowRxToCx(erow *row, int rx) {$/;"	f
editorRowsToString	ghi.c	/^char *editorRowsToString(int *buflen) {$/;"	f
editorSave	ghi.c	/^void editorSave() {$/;"	f
editorScroll	ghi.c	/^void editorScroll() {$/;"	f
editorSetStatusMessage	ghi.c	/^void editorSetStatusMessage(const char *fmt, ...) {$/;"	f
editorUpdateRow	ghi.c	/^void editorUpdateRow(erow *row) {$/;"	f
enableRawMode	ghi.c	/^void enableRawMode() {$/;"	f
erow	ghi.c	/^typedef struct erow {$/;"	s	file:
erow	ghi.c	/^} erow;$/;"	t	typeref:struct:erow	file:
filename	ghi.c	/^    char *filename;$/;"	m	struct:editorConfig	file:
getCursorPosition	ghi.c	/^int getCursorPosition(int *rows, int *cols) {$/;"	f
getWindowSize	ghi.c	/^int getWindowSize(int *rows, int *cols) {$/;"	f
initEditor	ghi.c	/^void initEditor() {$/;"	f
len	ghi.c	/^    int len;$/;"	m	struct:abuf	file:
main	ghi.c	/^int main(int argc, char *argv[]) {$/;"	f
numrows	ghi.c	/^    int numrows; \/\/ number of rows display$/;"	m	struct:editorConfig	file:
orig_terminos	ghi.c	/^    struct termios orig_terminos;    \/\/ Terminal attribute$/;"	m	struct:editorConfig	typeref:struct:editorConfig::termios	file:
render	ghi.c	/^    char *render;$/;"	m	struct:erow	file:
row	ghi.c	/^    erow *row; \/\/ Support multiple line$/;"	m	struct:editorConfig	file:
rowoff	ghi.c	/^    int rowoff; \/\/ Row offset$/;"	m	struct:editorConfig	file:
rsize	ghi.c	/^    int rsize; \/\/ render size$/;"	m	struct:erow	file:
rx	ghi.c	/^    int rx; \/\/ Fix move over tabs when tab is spaces$/;"	m	struct:editorConfig	file:
screencols	ghi.c	/^    int screencols;$/;"	m	struct:editorConfig	file:
screenrows	ghi.c	/^    int screenrows;$/;"	m	struct:editorConfig	file:
size	ghi.c	/^    int size;$/;"	m	struct:erow	file:
statusmsg	ghi.c	/^    char statusmsg[80];$/;"	m	struct:editorConfig	file:
statusmsg_time	ghi.c	/^    time_t statusmsg_time;$/;"	m	struct:editorConfig	file:
